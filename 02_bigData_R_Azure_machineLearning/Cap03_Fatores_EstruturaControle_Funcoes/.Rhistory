fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac
fac_vec2
summary(fac_vec2)
summary(vec2)
# Mais Exemplos
data = c(1,2,2,3,3,4,5,6,7,8,8,8,8,8,9,1,2,5,4,6,2,1,8,7,9,4,3,1,2,2,7)
fdata = factor(data)
fdata = factor(data)
data
# Mais Exemplos
data = c(1,2,2,3,3,4,5,6,7,8,8,8,8,8,9,1,2,5,4,6,2,1,8,7,9,4,3,1,2,2,7)
data
fdata = factor(data)
fdata
summary(fdata)
# Mais Exemplos
data = c(1,2,2,9,3,4,5,6,7,8,8,8,8,8,9,1,2,5,4,6,2,1,8,7,9,4,3,1,2,2,7)
data
fdata = factor(data)
fdata
summary(fdata)
# Fatores Ordenados
set1 <- c("CC", "B", "CA", "AA", "BA", "CB")
f_set <-factor(set1)
f_set
# Verificando se está ordenado
is.ordered(f_set)
o.set <- factor(set1,
levels = c("AA", "BA", "B", "CA", "CB", "CC"),
ordered = TRUE)
set1
o.set1
o.set
df <- fread("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes/03_etnias.csv")
df
View(df)
str(df)
str(df)
# Variável original (antes da transformação)
levels(df$Etnia)
summary(df$Etnia)
df$Etnia <- as.factor(df$Etnia)
levels(df$Etnia)
summary(df$Etnia)
# PLOTAGEM
boxplot(df$Idade ~ df$Etnia, xlab = 'Etnia', ylab = "Idade", main = "Idade por Etnia")
# PLOTAGEM
barplot(df$Idade ~ df$Etnia, xlab = 'Etnia', ylab = "Idade", main = "Idade por Etnia")
plot(df$Idade ~ df$Etnia, xlab = 'Etnia', ylab = "Idade", main = "Idade por Etnia")
# PLOTAGEM
barplot(df$Idade ~ df$Etnia, xlab = 'Etnia', ylab = "Idade", main = "Idade por Etnia")
box
# REGRESSÃO
summary(lm(Idade ~Etnia, data = df))
# Verificando novamente o STR
str(df)
df$Estado_Civil
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
# Verificando novamente o STR
str(df)
df
gc()
:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0,1,1,0,2)
vec3 <- c('Verde', 'Laranja', 'Azul', 'Laranja', 'Verde')
# UNINDO VETORES EM DF
df <- data.frame(vec1, vec2, vec3)
df
View(df)
# Verificando com o R categorizou a variável
str(df)
# Verificando Niveis
levels(df$vec3)
# Verificando Niveis
levels(df$vec3)
# CRIANDO NOVA COLUNA E ATRIBUINDO LABELS
df$cat1 <- factor(df$vec3,
labels = c("cor2", "cor1", "cor3"))
df
str(df)
df$vec3 <- factor(df$vec3)
str(df)
# CRIANDO NOVA COLUNA E ATRIBUNDO VEC2
df$cat2 <- factor(df$vec2,
labels = c("Divorciado", "Solteiro", "Casado"))
df
str(df)
levels(df$cat2)
levels(df$cat1)
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
print('OI')
print('OI')
for(i in 1:10){
print('OI')
}
rep(5,4)
print("Menor")
"Número é menor que 8"
"Este numero é maior que 8"
} else if (z == 8){
"Este numero é maior que 8"
if (z > 8){
"Este numero é maior que 8"
} else if (z == 8){
"Este numero é igual a 8"
} else{
"Número é menor que 8"
}
# IF ELSE ELSE IF
z = 7
if (z > 8){
"Este numero é maior que 8"
} else if (z == 8){
"Este numero é igual a 8"
} else{
"Número é menor que 8"
}
y = 5
ifelse(y < 6, "Correto", "Errado")
ifelse(y > 6, "Correto", "Errado")
numero = 10
ifelse(numero == 20, "Número é igual a 20",
ifelse(numero == 10, "Igual a 10, Número diferente de 10 e 20"))
ifelse(numero == 20, "Número é igual a 20",
ifelse(numero == 10, "Igual a 10"," Número diferente de 10 e 20"))
# IFELSE ANINHADO
numero = 10
ifelse(y<7, x+y, "Não encontrado")
nc1 <- function(x,y){
ifelse(y<7, x+y, "Não encontrado")
}
func1(4,2)
# ESTRUTURA E CONTROLE DENTRO DE FUNÇÕES
func1 <- function(x,y){
ifelse(y<7, x+y, "Não encontrado")
}
func1(4,2)
func1(8,9)
# REP
rep(rnorm(10),5)
rep("Botafogo",10)
# Loop For
for(i in 1:20) {print(i)}
for(q in rnorm(10)){print((q))}
break
for(i in 1:20) {
print(i)
if (i == 15){
break
}}
for(q in rnorm(10)){print((q))}
for(i in 1:22){
if(i == 13 | i == 15){
next
}
print(i)
}
source("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes/05_Estrutura_de_Controle.R")
source("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes/05_Estrutura_de_Controle.R")
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
# HELP
?sample
args(sample)
args(mean)
args(sd)
# Funções Built-in
abs(-43) # Valor absoluto
sum(1:15)
sum(c(1:15)
sum(c(1:15))
# Funções Built-in
abs(-43) # Valor absoluto
sum(c(1:15))
mean()
mean(c(1:8))
round(c(1.1:5.8))
rev(c(1:5))
sort(rev(c(1:10)))
append(c(1:6), 6)
vec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)
vec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)
vec2 <- rev(vec1)
vec2
myfunc <- function(x,y){
return(x+y)
}
myfunc(10,15)
jogar_bola <- function(){
num <- sample(1:6, size = 1)#local
num
}
jogar_bola()
jogar_bola()
jogar_bola()
jogar_bola()
jogar_bola()
jogar_bola()
jogar_dados()
jogar_dados <- function(){
num <- sample(1:6, size = 2)#local
num
}
jogar_dados()
num <- sample(1:6, size = 1)#local
jogar_dados <- function(){
num <- sample(1:6, size = 1)#local
num
}
jogar_dados()
jogar_dados()
jogar_dados()
jogar_dados()
jogar_dados()
jogar_dados()
jogar_dados()
jogar_dados()
vec1 <- c(10:13)
# Função sem numerod e parametros
myfunc3 <- function(...){
df = data.frame(cbind(...))
print(df)
}
vec1 <- c(10:13)
vec2 <- c("a", "b", "c", "d")
vec3 <- c(6.5, 7.5, 8.7, 1.8)
myfunc3(vec1)
myfunc3(vec1, vec2)
myfunc3(vec1, vec2, vec)
myfunc3(vec1, vec2, vec3)
View(df)
# Função sem numerod e parametros
myfunc3 <- function(...){
df = data.frame(cbind(...))
print(df)
View(df)
}
vec1 <- c(10:13)
vec2 <- c("a", "b", "c", "d")
vec3 <- c(6.5, 7.5, 8.7, 1.8)
myfunc3(vec1)
myfunc3(vec1, vec2)
myfunc3(vec1, vec2, vec3)
x <- 1:1000000
x
# Função que calcula raiz quadrada de cada elemento
meu_sqrt <- function(numeros)
# Função que calcula raiz quadrada de cada elemento
meu_sqrt <- function(numeros){
resp <- numeric(length(numeros))
for(i in seq_along(numeros)){
resp[i] <- sqrt(numeros[i])
}
return(resp)
}
system.time(x2a <- meu_sqrt(x))
system.time(x2b <- sqrt(x))
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
# Usando um loop
lista1 <- list(a = (1:20), b = (35:67))
lista1
lista1$a
lista1$b
# Comparando com loop for
soma_a = 0
soma_b = 0
for(n in lista1$a){
soma_a = soma_a + n
}
for(n in lista1$b){
soma_b = soma_b + n
}
soma_a
soma_b
# Agora fazendo a mesma operação com apply
?sapply
sapply(lista1$a, sum)
sapply(lista1, sum)
sapply(lista1, mean)
# ------------------------- APPLY() ------------------------------ #
?apply
x <- matrix(c(20,13,65,32,45,12,76,49,82), nr = 3, byrow = T)
x
apply(x, mean)
apply(x, mean)
apply(x, 1, mean)
x <- matrix(c(10,13,65,10,45,12,10,49,82), nr = 3, byrow = T)
x
apply(x, mean)
apply(x, 1, mean)
apply(x, 2, mean)
apply(x, 2, sum)
apply(x, 1, plot)
result_apply <- apply(x,1,mean)
result_apply
type(result_apply)
class(result_apply)
tipe(result_apply)
typeof(result_apply)
escola <- data.frame(Aluno = c("Bob", "Júlia", "Marta"),
Fisica = c(91, 100, 58),
Matematica = c(99, 87, 79),
Quimica = c(77,88,99))
escoal
escola
escola$Matematica
# Calculando Média por aluno
escola$Media = NA
escoal
escola
escola$Media = apply(escola[, c(2, 3, 4)], 1, mean)
escola
escola$Media = round(escola$Media)
escola
escola$Media = round(escola$Media, 2)
escola
escola
#---------------------- TAPPLY() -------------------------------------#
?gl
tabela_basquete <-
data.frame(equipe = gl(5,5, labels = paste("Equipe", LETTERS[1:5])),
jogador = sample(letters, 25),
num_cestas = floor(runif(25, min=0, max=50)))
tabela_basquete
tabela_basquete$equipe == "Equipe A"
if(tabela_basquete$equipe == "Equipe A"){
sapply(tabela_basquete, sum)
}
if(tabela_basquete$equipe == "Equipe A"){
sapply(tabela_basquete, sum)
}
# TAPPLY() VS SQLDF
install.packages('sqldf')
library(sqldf)
library(sqldf)
sqldf(" select equipe, sum(num_cestas from tabela_basquete group by equipe")
sqldf(" select equipe, sum(num_cestas) from tabela_basquete group by equipe")
tapply( tabela_basquete$num_cestas, tabela_basquete$equipe, sum)
tapply( tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
tapply( tabela_basquete$num_cestas, tabela_basquete$equipe, sum) #tapply e´como se fosse o group by
tapply( tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
sqldf(" select equipe, sum(num_cestas) from tabela_basquete group by equipe")
tapply( tabela_basquete$num_cestas, tabela_basquete$equipe, sum) #tapply e´como se fosse o group by
tapply( tabela_basquete$num_cestas, tabela_basquete$equipe, mean)
# ----------------------------  trabalhando com o BY() ---------------------- #
?by
dat <- data.frame(species = c(rep(c(1,2,3), each = 5)), petal.length = c(rnorm(5,4.5,1), rnorm(5,4.5,1), rnorm(5,5.5,1)),
petal.width = c(rnorm(5,2.5,1), rnorm(5,2.5,1), rnorm(5,4,1)))
dat
str(dat)
summary(dat)
dat$species <- factor(dat$species)
str(dat)
# APLICANDO BY - TEM QUE SER EM FATORES
by(dat, dat$species, function(x){
# CALCULA O COMPRIMENTO MÉDIO DA PTALA PARA CADA SPECIE
mean.p1 <- mean(x$petal.length)
})
lista2 <- list(a = (1:10), b = (45:77))
lista1
lapply(lista1, sum)
lapply(lista1$a, sum)
lapply(lista1, sum)
sapply(lista1, sum)
lista2
lapply(lista2, sum)
sapply(lista2, sum)
vapply(lista2, fivenum, c(Min. = 0, "1stQu." = 0, Median = 0, "3rd Qu." = 0, Max = 0))
# ---------------- REPLICATE
?replicate
replicate(7, runif(10))
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 4:3)
getwd()
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
lista1 <- list(6, "b", 15)
lista1 <- list(6, "b", 15)
lista1
class(lista1)
unlist(lista1)
vec1 <- unlist(lista1)
class(vec1)
vec1
lista2 <- list(v1 = 6, v2 = list(3381, 2190), v3 = c(30,17))
lista2
unlist(lista2)
mean(unlist(lista2))
?do.call
data <- list()
N <- 100
for (n in 1:N){
data[[n]] = data.frame(index = n, char = sample(letters, 1), z = rnorm(1))
}
head(data)
View(data)
head(data)
do.call(rbind, data)
class(do.call(rbind, data))
y <- list(1:3, 4:6, 7:9)
y
lapply(y, sum)
do.call(sum, y)
strsplit(texto, " ")
texto("Testando Botafogo contra Madureira")
strsplit(texto, " ")
texto("Testando Botafogo contra Madureira")
texto <- "Testando Botafogo contra Madureira"
strsplit(texto, " ")
strsplit(texto, "")
dates <- c("1998-05-23", "2008-12-30", "2009-11-29")
temp <- strsplit(dates, "-")
temp
# split com dataframe
antes = data.frame(attr = c(1,30,4,6), tipo = c("pao_e_agua", "pao_e_agua_2"))
antes
strsplit(as.character(antes$tipo), '_e_')
library(stringr)
# Utilizando do.call para unir os elementos da lista
do.call(rbind, antes)
# Utilizando do.call para unir os elementos da lista
do.call(rbind, strsplit(as.character(antes$tipo), '_e_'))
# Utilizando do.call para unir os elementos da lista
do.call(rbind, strsplit(as.character(antes$tipo), '_e_')) # Virou matriz
# ------------------------ USANDO PACOTE DPLYR E TIDYR
library(dplyr)
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
antes <- data.frame(
attr = c(1,30,4,6),
tipo = c("pao_e_agua", "pao_e_agua_2")
)
antes
antes%>%
antes%>%
separate(tipo, c('pao', 'agua'), '_e_')
antes%>%
separate(tipo, c('pao', 'agua'), '_e_')
class(antes)
getwd()
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
search()
# Instalando pacotes com vetores
install.packages(c("ggvis", "tm", "dplyr"))
install.packages(c("ggvis", "tm", "dplyr"))
library(ggvis)
library(tm)
library(dplyr)
search()
?require
#lista conteudo dos pacotes
ls(pos = "package:tm")
# Lista funções e como utilizar
lsf.str("package:tm")
lsf.str("package:ggplot2")
lsf.str("package:ggplot2")
library(ggplot2)
lsf.str("package:ggplot2")
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
str <- c("Expressões", "Regulares", "em linguagem R", "permitem a busca por padrões",
"e explora de textos", "101010121549")
str
length(str)
# grep
grep("ex", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("ex", str, value = T)
grep("\\d", str, value = T)
grep("\\d+", str)
grepl("\\d+", str)
grepl("\\D", str)
str <- c("expressões", "Regulares", "em linguagem R", "permitem a busca por padrões",
"e explora de textos", "101010121549")
str
length(str)
# grep
grep("ex", str, value = F) # verifica se usa "ex"
grep("ex", str, value = T)
grep("\\d", str, value = F)
grep("\\d", str, value = T)
# GSUB - para substituição
gsub("res", "*******", str)
gsub("ex", "EX", str, ignore.case = T)
regexpr(pattern = "u", frase)
# REGEXPR()
frase <- "Isso é uma String"
regexpr(pattern = "u", frase)
str2 <- c("2678 é maior que 45 - @#$%¨$@#$#", "Vamos escrever 14 scripts em R")
gsub("\\d", "", str2)
gsub("\\D", "", str2)
gsub("\\s", "", str2)
gsub("[iot]", "Q", str2)
getwd()
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
hoje <- Sys.Date()
hoje
Sys.time()
Sys.timezone()
