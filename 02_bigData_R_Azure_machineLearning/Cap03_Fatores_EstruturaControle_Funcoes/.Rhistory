7+7
7-4
5*5
6/6
3**3
3^3
7-4
5*5
6/6
3^3
3**3
7-4
5*5
6/6
3^3
3**3
# Resto da divisão
16 %% 3
x > 7
z = 5
# Operadores relacionais
x = 7
x > 7
x == 8
x == 8
x !=
x !=12
x != 12
x !=12
# AND
(x == 8) & (x==6)
# OR
(x == 7) | (x>=5)
print(!x > 8)
# Not
x > 8
print(!x > 8)
# Criando Variáveis
var1 = 100
print(var1)
mode(var1)
help('mode')
sqrt(var1)
# Atribuir valor de variavel em outra variavel
var2 = var1
var2
typeof(var2)
mode(var2)
# Lista de elementos
var3 = c('primeiro', 'segundo', 'terceiro')
mode(var3)
typeof(var3)
# Chamando uma função
var4 = function(x){x+3}
var4
mode(var4)
var4(3)
var4(10)
# Mudar o modo do dado
var1
var5 = as.character(var1)
var5
mode(var5)
x
# Atribuindo valores a objetos
x <- c(1,2,3)
x
x
x1 = c(1,2,3)
x1
mode(x)
mode(x1)
typeof(x)
typeof(x1)
c(1,2,3) -> y
y
assign("x", c(6.3, 8.9, -6))
x
x
x[0]
x[1]
# Verifica objetos
ls()
objects()
2+2
4-9
2+2
getwd() # Visualiza diretório
license() # licença
print('Estou iniciando os estudos com a linguagem R')
getwd() # Visualiza diretório
sessionInfo() # Resumo sobre a sessão
print('Estou iniciando os estudos com a linguagem R')
# Carregando pacote da memória
library(ggplot2)
# Instalando pacotes
install.packages('randomForest')
install.packages('ggplot2')
install.packages('dplyr')
install.packages("ggplot2")
# Criando gráfico
plot(1:25)
# Criando gráfico
plot(1:25:2)
# Criando gráfico
plot(1:25:5)
# Criando gráfico
plot(1:25:15)
# Carregando pacote da memória
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("caret")
# Instalando pacotes
install.packages('randomForest')
install.packages('ggplot2')
install.packages('dplyr')
install.packages('devtools')
# Carregando pacote da memória
library(ggplot2)
# Descarregar o pacote
detach(package:ggplot2)
# Se souber o nome da função
help(sum)
# Se souber o nome da função
help(mean)
# Se souber o nome da função
help(library)
# Para buscar mais opçoes sobre uma função, podemos utilizar o SOS
install.packages("sos")
library(sos)
findFn("fread")
# Se souber o nome da função
help.search('randomForest')
help.search('matplot')
??matplot # Outra forma de chamar o help
example('matplot') # Exemplo de utilização da função matplot
# Sair
q()
hoje <- Sys.Date()
hoje
Sys.time()
Sys.timezone()
# Formatação de sa[ida]
as.Date('2018-06-28')
as.Date('Jun-28-18', format = "%b-%d-%y")
as.Date('Jun-28-18', format = "%d-%B-%y")
b
as.Date('Jun-28-18', format = "%b-%d-%y")
as.Date('Jun-28-18', format = "%b-%d-%y")
as.Date('Jun-28-18', format = "%B-%d-%y")
Sys.Date()
format(Sys.Date(), format = "%d - %m - %y")
format(Sys.Date(), format = "%d / %m / %y")
# Operações com datas
data_de_hoje <- asDate("2016-06-25", format = "%Y-%m-%d")
# Operações com datas
data_de_hoje <- as.Date("2016-06-25", format = "%Y-%m-%d")
data_de_hoje
data_de_hoje +1
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
mean(x = 1:10)
mean(x <- 1:10)
mean(x = 1:10)
x
x
mean(x <- 1:10)
x
mean(x = 1:10)
x
mean(x <- 1:10)
x
# Criando um Vetor
vec1 <- c(12, 3, 4, 19, 34)
# Exercício 1 - Pesquise pela função que permite listar todos os arquivo no diretório de trabalho
getwd()
# Criando um Vetor
vec1 <- c(12, 3, 4, 19, 34)
data <- data.frame(nomes, covid, idade)
# Exercício 2 - Crie um dataframe a partir de 3 vetores: um de caracteres, um lógico e um de números
nomes <- c("Olívia", "Carlos", "Lucas")
covid <- c(TRUE, FALSE, FALSE)
idade <- c(21,34,12)
data <- data.frame(nomes, covid, idade)
data
# Criando um Vetor
vec1 <- c(12, 3, 4, 19, 34)
vec1
print(x)
for(x in vec1){
if(x > 10){
print(x)
}
}
# Exercício 4 - Conisdere a lista abaixo. Crie um loop que imprima no console cada elemento da lista
lst2 <- list(2, 3, 5, 7, 11, 13)
lst2
for(y in lst2){
print(y)
}
# Configurando o diretório de trabalho
# Coloque entre aspas o diretório de trabalho que você está usando no seu computador
# Não use diretórios com espaço no nome
setwd("C:/formacao_dataScience_DSA/02_bigData_R_Azure_machineLearning/Cap03_Fatores_EstruturaControle_Funcoes")
getwd()
list.files()
# Criando um Vetor
vec1 <- c(12, 3, 4, 19, 34)
vec1
for(x in vec1){
if(x > 10){
print(x)
}
}
# Multiplicação element-wise
mat3 <- mat1 * mat2
# Exercício 5 - Considere as duas matrizes abaixo.
# Faça uma multiplicação element-wise e multiplicação normal entre as materizes
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat2 <- t(mat1)
mat2
# Multiplicação element-wise
mat3 <- mat1 * mat2
# Multiplicação element-wise
mat3 <- mat1 * mat2
mat3
# Multiplicação de matrizes
mat4 <- mat1 %*% mat2
mat4
# Exercício 9 - Para o vetor abaixo, ordene os valores em ordem crescente
a <- c(100, 10, 10000, 1000)
a
order(a)
a[order(a)]
# Demo
demo("graphics")
# Plot básico
x = 5:7
# Demo
demo("graphics")
y = 8:10
plot(x,y)
# Plot básico
x = 5:7
y = 8:10
plot(x,y)
largura <- c(51,63,69,70)
# Altura
altura <- c(145,167,180,183)
largura <- c(51,63,69,70)
plot(altura, largura)
# Plotanod Dataframe
lynx
plot(lynx)
plot(lynx, ylab = 'Plot Dataframe', xlab = "")
plot(lynx, col = 'red' ,ylab = 'Plot Dataframe', xlab = "")
library(datasets)
airquality
transform(airquality, month = factor(month))
transform(airquality, Month = factor(Month))
airquality
transform(airquality, Month = factor(Month))
boxplot(Ozone - Month, airquality, xlab = 'Month')
boxplot(Ozone ~ Month, airquality, xlab = 'Month')
# ---- Parâmetro dos gráficos
par()
par('pch')
par('lty')
x = 2.4
x = 2:8
plot(x,pch = 'b')
# mesma área de plotagem para os gráficos
par(mfrow = c(2,2), col.axis = 'red')
# mesma área de plotagem para os gráficos
par(mfrow = c(2,2), col.axis = 'red')
plot(1:8, las =0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las =1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las =2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las =3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
legend('topright', pch = 1, col = c("blue", "red"))
legend('topright', pch = 1, col = c("blue", "red"), legend = c("Var1", "Var2"))
# mesma área de plotagem para os gráficos
par(mfrow = c(2,2), col.axis = 'red')
plot(1:8, las =0, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las =1, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las =2, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
plot(1:8, las =3, xlab = 'xlab', ylab = 'ylab', main = 'LAS = 0')
legend('topright', pch = 1, col = c("blue", "red"), legend = c("Var1", "Var2"))
# Cores disponiveis
colors()
# Salvando Gráficos em PNG e PDF
png('Gráfico.png', width = 500, heigt = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col= iris$Species,
main = "Gráfico gerado a partir do Iris Flowers")
dev.off()
# Salvando Gráficos em PNG e PDF
png('Gráfico.png', width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col= iris$Species,
main = "Gráfico gerado a partir do Iris Flowers")
dev.off()
dev.off()
# Salvando Gráficos em PNG e PDF
png('Gráfico.png', width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col= iris$Species,
main = "Gráfico gerado a partir do Iris Flowers")
dev.off()
# Salvando Gráficos em PNG e PDF
png('Grafico.png', width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col= iris$Species,
main = "Gráfico gerado a partir do Iris Flowers")
# PDF
png('Grafico2.pdf', width = 500, height = 500, res = 72)
plot(iris$Sepal.Length, iris$Petal.Length,
col= iris$Species,
main = "Gráfico gerado a partir do Iris Flowers")
dev.off()
install.packages('ggplot2')
library(ggplot2)
# Plotando um grfico básico com gplot()
data(tips, package = 'reshape2')
gplot(total_bill, tip, data = tipos, geom = "point")
qplot(total_bill, tip, data = tipos, geom = "point")
# Plotando um grfico básico com qplot()
data(tips, package = 'reshape2')
qplot(total_bill, tip, data = tipos, geom = "point")
qplot(total_bill, tips, data = tipos, geom = "point")
View(tips)
qplot(total_bill, tips, data = tips, geom = "point")
qplot(total_bill, tip, data = tips, geom = "point")
# Plotando um grfico básico com qplot()
data(tips, package = 'reshape2')
View(tips)
qplot(total_bill, tip, data = tips, geom = "point")
# Plotando um grfico básico com qplot()
data(tips, package = 'reshape2')
View(tips)
qplot(total_bill, tip, data = tips, geom = "point")
qplot(total_bill, tip, data = tips, geom = "point")
library(ggplot2)
# Plotando um grfico básico com qplot()
data(tips, package = 'reshape2')
View(tips)
qplot(total_bill, tip, data = tips, geom = "point")
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 8
)
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 8
)
View(tips)
View(tips)
View(tips)
View(tips)
View(tips)
qplot(total_bill, tip, data = tips, geom = "point")
qplot(total_bill, tip, data = tips, geom = "point")
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 8
)
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
