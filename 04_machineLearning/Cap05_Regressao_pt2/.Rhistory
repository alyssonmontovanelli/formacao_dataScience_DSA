typeof(x)
typeof(x1)
c(1,2,3) -> y
y
assign("x", c(6.3, 8.9, -6))
x
x
x[0]
x[1]
# Verifica objetos
ls()
objects()
2+2
4-9
2+2
getwd() # Visualiza diretório
license() # licença
print('Estou iniciando os estudos com a linguagem R')
getwd() # Visualiza diretório
sessionInfo() # Resumo sobre a sessão
print('Estou iniciando os estudos com a linguagem R')
# Carregando pacote da memória
library(ggplot2)
# Instalando pacotes
install.packages('randomForest')
install.packages('ggplot2')
install.packages('dplyr')
install.packages("ggplot2")
# Criando gráfico
plot(1:25)
# Criando gráfico
plot(1:25:2)
# Criando gráfico
plot(1:25:5)
# Criando gráfico
plot(1:25:15)
# Carregando pacote da memória
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("caret")
# Instalando pacotes
install.packages('randomForest')
install.packages('ggplot2')
install.packages('dplyr')
install.packages('devtools')
# Carregando pacote da memória
library(ggplot2)
# Descarregar o pacote
detach(package:ggplot2)
# Se souber o nome da função
help(sum)
# Se souber o nome da função
help(mean)
# Se souber o nome da função
help(library)
# Para buscar mais opçoes sobre uma função, podemos utilizar o SOS
install.packages("sos")
library(sos)
findFn("fread")
# Se souber o nome da função
help.search('randomForest')
help.search('matplot')
??matplot # Outra forma de chamar o help
example('matplot') # Exemplo de utilização da função matplot
# Sair
q()
install.packages('ggplot2')
library(ggplot2)
# Plotando um grfico básico com qplot()
data(tips, package = 'reshape2')
View(tips)
qplot(total_bill, tip, data = tips, geom = "point")
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
# Construindo um modelo de regressão linear
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
# Camada 2
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = 'darkgreen'
)
ggplot() + camada1 + camada2
# Camada 3
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
ggplot() + camada1 + camada2 + camada3
# Camada 3
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.4
)
ggplot() + camada1 + camada2 + camada3
# VERSÃO FINAL COM OTIMIZAÇÃO
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var = 1:100 +
rnorm(100, sd = 9), var2 = 1:100 +
rnorm(100, sd = 16))
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var = 1:100 +
rnorm(100, sd = 9), var2 = 1:100 +
rnorm(100, sd = 16))
# VERSÃO FINAL COM OTIMIZAÇÃO
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var = 1:100 +
rnorm(100, sd = 9), var2 = 1:100 +
rnorm(100, sd = 16))
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var = 1:100 +
rnorm(100, sd = 9), var2 = 1:100 +
rnorm(100, sd = 16))
data
# Dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 +
rnorm(100, sd = 9), var2 = 1:100 +
rnorm(100, sd = 16))
# Plotagem
ggplot(data, aes(x = var1, y = var2))
# Plotagem
ggplot(data, aes(x = var1, y = var2)) + geom_point(shape = 1) +
geom_smooth(method = , color = "red", se = FALSE)
# Dados
data = data.frame(grupo = c('A', 'B', 'C', 'D'),
valor = c(33,62,56,67),
num_obs = c(100, 500, 459, 340))
# Gerando massa de dados
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$
data$right
data$left = data$right - data$num_obs
data
View(dataset_bank)
# Carregando dados
dataset_bank <- read.table("C:\formacao_dataScience_DSA_DADOS\04_machineLearning\Cap02\bank\bank-full.csv",
View(dataset_bank)
# Carregando dados
dataset_bank <- read.table("C:/formacao_dataScience_DSA_DADOS/04_machineLearning/Cap02/bank/bank-full.csv",
header = TRUE, sep = ";")
View(dataset_bank)
round(dataset_bank)
# função table() para conhecer melhor os dados
table(dataset_bank$job)
# Visualizando os valores da tabela de forma gráfica
library(dplyr)
library(ggplot2)
dataset_bank %>%
group_by(job)%.%
summarise(n = n())%>%
ggplot(aes(x = job, y = n))+
geom_bar(start = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Visualizando os valores da tabela de forma gráfica
library(dplyr)
library(ggplot2)
dataset_bank %>%
group_by(job)%.%
summarise(n = n())%>%
ggplot(aes(x = job, y = n))+
geom_bar(start = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dataset_bank %>%
group_by(job)%>%
summarise(n = n())%>%
ggplot(aes(x = job, y = n))+
geom_bar(start = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dataset_bank %>%
group_by(job)%>%
summarise(n = n())%>%
ggplot(aes(x = job, y = n))+
geom_bar(start = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dataset_bank %>%
group_by(job)%>%
summarise(n = n())%>%
ggplot(aes(x = job, y = n))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dataset_bank %>%
group_by(job)%>%
summarise(n = n())%>%
ggplot(aes(x = job, y = n))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
dataset_bank %>%
group_by(job)%>%
summarise(n = n())%>%
ggplot(aes(x = job, y = n))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Adicionando nova coluna ao conjunto de dados com o mutate()
dataset_bank <- dataset_bank %>%
mutate(technology_use =
case_when(job == 'admin' ~ 'medio',
job == 'admin' ~ 'medio',
job == 'admin' ~ 'medio',))
# Adicionando nova coluna ao conjunto de dados com o mutate()
dataset_bank <- dataset_bank %>%
mutate(technology_use =
case_when(job == 'admin' ~ 'medio',
job == 'blue-collar' ~ 'baixo',
job == 'entrepreneur' ~ 'alto',
job == 'housemaid' ~ 'baixo',
job == 'management' ~ 'medio',
job == 'retired' ~ 'baixo',
job == 'self-employed' ~ 'baixo',
job == 'services' ~ 'medio',
job == 'student' ~ 'alto',
job == 'technician' ~ 'alto',
job == 'unemployed' ~ 'baixo',
job == 'unknown' ~ 'baixo'))
View(dataset_bank)
# PLotando nova coluna
dataset_bank %>%
group_by(technology_use)%>%
summarise(n = n())%>%
ggplot(aes(x = technology_use, y = n))+
geom_bar(stat = "Conhecimento em Tecnologia")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# PLotando nova coluna
dataset_bank %>%
group_by(technology_use)%>%
summarise(n = n())%>%
ggplot(aes(x = technology_use, y = n))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
######################################################
dataset_bank <- dataset_bank %>%
mutate(defaulted = ifelse(default == 'yes', 1, 0))
View(data)
View(dataset_bank)
library(caret)
bank.dummies <- data.frame(predict(dmy, newdata = dataset_bank))
dmy <- dummyVars(" ~ .", data = dataset_bank)
bank.dummies <- data.frame(predict(dmy, newdata = dataset_bank))
View(bank.dummies)
dataset_bank %>%
group_by(job, maritial)%>%
summarise(n = n())
dataset_bank %>%
group_by(job, marital)%>%
summarise(n = n())
dataset_bank %.%
group_by(job, martial) %>%
summarise(n=n()) %>%
ggplot(aes(x = job, y = n, fill = marital))+
geom_bar(stat = 'identity', position = 'dodge')+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
dataset_bank %>%
group_by(job, martial) %>%
summarise(n=n()) %>%
ggplot(aes(x = job, y = n, fill = marital))+
geom_bar(stat = 'identity', position = 'dodge')+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
dataset_bank %>%
group_by(job, martial) %>%
summarise(n=n()) %>%
ggplot(aes(x = job, y = n, fill = marital))+
geom_bar(stat = 'identity', position = 'dodge')+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
dataset_bank %>%
group_by(job, marital) %>%
summarise(n=n()) %>%
ggplot(aes(x = job, y = n, fill = marital))+
geom_bar(stat = 'identity', position = 'dodge')+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
# Utilizando dummyVars nesse conjunto sumarizado
dmy <- dummyVars( ~ job:marital, data = dataset_bank)
bank.cross <- predict(dmy, newdata = dataset_bank)
View(bank.cross)
# Definindo diretório do trabalho
setwd('C:/fomacao_dataScience_DSA/04_machineLearning/Cap05_Regressao_pt2')
# Definindo diretório do trabalho
setwd('C:/formacao_dataScience_DSA/04_machineLearning/Cap05_Regressao_pt2')
getwd()
# Instalando Pacotes
install.packages("caret") # machine learning
install.packages("ROCR") # Permite criar curva de avaliação do modelo
install.packages("e1071") # FUnções e algoritmos uteis
# Carregando Pacotes
library(caret)
library(ROCR)
library(e1071)
# Carregando o dataset em um dataframe
credito_dataset <- read.csv("C:/formacao_dataScience_DSA_DADOS/04_machineLearning/Cap05_Regressao_pt2/dados/R/credit_dataset_final.csv",
header = TRUE,
sep = '.')
head(credito_dataset)
summary(credito_dataset)
str(credito_dataset)
View(credito_dataset)
head(credito_dataset)
summary(credito_dataset)
str(credito_dataset)
View(credito_dataset)
View(credito_dataset)
str(credito_dataset)
# Carregando o dataset em um dataframe
credito_dataset <- read.csv("C:/formacao_dataScience_DSA_DADOS/04_machineLearning/Cap05_Regressao_pt2/dados/R/credit_dataset_final.csv",
header = TRUE,
sep = ',')
head(credito_dataset)
summary(credito_dataset)
str(credito_dataset)
View(credito_dataset)
# Converter variaveis para o tipo fator (Fatores) - categorização
to.factors <-function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return(df)
}
# Normalização
scale.features <- function(df, variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]], center = T, scale = T)
}
return(df)
}
# Normalização
scale.features <- function(df, variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]], center = T, scale = T) # Função scale() para mudar escala da variavel
}
return(df)
}
# Normalizando as variaveis
numeric.vars <- c("credit.duration.months", "age", "credit.amount")
credito_dataset_scaled <- scale.features(credito_dataset, numeric.vars)
# Variáveis do tipo fator (Categoricas)
categorical.vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status', 'credit.purpose',
'savings', 'employment.duration', 'installment.rate', 'marital.status', 'guarantor',
'residence.duration', 'current.assets', 'other.credits', 'apartment.type', 'bank.credits',
'occupation','dependents', 'telephone', 'foreign.worker')
credit.duration.monthssavings
categorical.vars
str(credito_dataset_final)
# Aplicando as conversões no dataset
credito_dataset_final <- to.factors(df = credito_dataset_scaled, variables = categorical.vars)
str(credito_dataset_final)
View(credito_dataset_final)
# Preparando dados de treino e teste
indexes <- sample(1:nrow(credito_dataset_final), size = 0.6 * nrow(credito_dataset_final)) # Fatiando 60% dos dados
tain.data <- credito_dataset_final[indexes,]
test.data <- credito_dataset_final[-indexes,]
class(train.data)
tain.data <- credito_dataset_final[indexes,]
test.data <- credito_dataset_final[-indexes,]
class(train.data)
train.data <- credito_dataset_final[indexes,]
test.data <- credito_dataset_final[-indexes,]
class(train.data)
class(test.data)
# Separando atributos e as classes
test.feature.vars <-test.data [,-1]
test.class.var <- test.data[,1]
class(test.feature.vars)
class(test.class.var)
# Separando atributos e as classes
test.feature.vars <-test.data [,-1] # features - preditoras
test.class.var <- test.data[,1] # variavel resposta
class(test.feature.vars)
class(test.class.var)
#################################################################
### CONSTRUINDO O MODELO DE REGRESSÃO LOGÍSTICA ###
formula.init <- "credit.rating ~ ." # ao lado esquerdo do '~' fica a resposta, do direito, as preditoras
formula.init <- as.formula(formula.init)
help(glm)
formula.init
# Modelando abaixo
modelo_v1 <- glm(formula = formula.init, data = train.data, family = "binomial")
# Visualizando detalhes do modelo
summary(modelo_v1)
# Fazendo Previsões e analisando resultados
View(test.data)
previsoes <- predict(modelo_v1, test.data, type = "response")
previsoes
previsoes <-round(previsoes) # retorna valor arredondado 0 e 1
View(previsoes)
previsoes <- predict(modelo_v1, test.data, type = "response") # retorna a previsao em %
previsoes <-round(previsoes) # retorna valor arredondado 0 e 1
View(previsoes)
# Confusion Matrix
confusionMatrix(table(data = previsoes, reference = test.class.var), positive = '1')
##### FEATURE SELECTION
formula <- "credit.rating ~ ."
formula <- as.formula(formula)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
# Instalando Pacotes
install.packages("caret") # machine learning
install.packages("ROCR") # Permite criar curva de avaliação do modelo
install.packages("e1071") # FUnções e algoritmos uteis
install.packages("caret")
# Carregando Pacotes
library(caret)
# Carregando Pacotes
library(caret)
library(ROCR)
library(e1071)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
importance <- varImp(model, scale = FALSE)
##### FEATURE SELECTION
formula <- "credit.rating ~ ."
formula <- as.formula(formula)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
importance <- varImp(model, scale = FALSE)
model <-train(formula, data = train.data, method = 'glm', trControl = control)
importance <- varImp(model, scale = FALSE)
## PLOT
plot(importance)
##### ---------------------------------------------------------------
# CONSTRUINDO NOVO MODELO COM AS VARIÁVEIS SELECIONADAS
# UTILIZAREI AS MAIS IMPORTANTES DA VIDA
formula.new <- "credit.rating ~ account.balance + credit.purpose + previous.credit.paymer + savings + credit.duration.months"
formula.new <- as.formula(formula.new)
modelo_v2 <- glm(formula = formula.new, data = train.data, family = 'binomial')
##### ---------------------------------------------------------------
# CONSTRUINDO NOVO MODELO COM AS VARIÁVEIS SELECIONADAS
# UTILIZAREI AS MAIS IMPORTANTES DA VIDA
formula.new <- "credit.rating ~ account.balance + credit.purpose + previous.credit.payment.status + savings + credit.duration.months"
formula.new <- as.formula(formula.new)
modelo_v2 <- glm(formula = formula.new, data = train.data, family = 'binomial')
# Prevendo e avaliando o modelo
previous_new <- predict(modelo_v2, test.data, type = 'response')
previous_new <- round(previous_new)
# Confusion Matrix
confusionMatrix(table(data = previous_new, reference = test.class.var), positive = '1')
#### ---------------------------------------------------
# Avaliando a performance do modelo
modelo_final <- modelo_v2
previsoes <- predict(modelo_final, test.feature.vars, type = 'response')
avaliacao <- prediction(previsoes, test.class.var)
# Função para Plot ROC
plot.roc.curve <- function(predictions, title.tex){
perf <- performance(avaliacao, "tpr","fpr")
plot(perf, col = 'black', lty = 1, lwd = 2,
main = title.text, cex.main = 0.6, cex.lab = 0.8, xaxs = 'i', yaxs = 'i')
abline(0,1, col = 'red')
auc <- performance(avaliacao, 'auc')
auc <- unlist(slot(auc, 'y.values'))
auc <- round(auc,2)
legend(0.4,0.4,legend = c(paste0("AUC: ",auc )), cex = 0.6, bty = 'n', box.col = 'white')
}
# PLot
par(mfrow = c(1,2))
plot.roc.curve(avaliacao, title.text = "Curva ROC")
# Novos dados
account.balance <- c(1,3,3,2)
credit.purpose <- c(4,2,3,2)
plot.roc.curve(avaliacao, title.text = "Curva ROC")
library(ROCR)
plot.roc.curve(avaliacao, title.text = "Curva ROC")
# Novos dados
account.balance <- c(1,3,3,2)
# PLot
par(mfrow = c(1,2))
plot.roc.curve(avaliacao, title.text = "Curva ROC")
# Novos dados
account.balance <- c(1,3,3,2)
credit.purpose <- c(4,2,3,2)
previous.credit.payment.status <- c(3,3,2,2)
savings <- c(2,3,2,3)
credit.duration.months <- c(15,12,8,6)
# Criando novo dataframe
new.numeric.vars <- c("credit.duration.months")
# Criando novo dataframe
novo_datatset<- data.frame(account.balance,
credit.purpose,
previous.credit.payment.status,
savings,
credit.duration.months)
class(novo_datatset)
View(novo_datatset)
# Separa variáveis exploratórias numericas e categoricas
new.numeric.vars <- c("credit.duration.months")
new.categorical.vars <- c("account.balance", "credit.purpose", "previous.credit.payment.status", "savings")
# Aplicando as transformações
novo_dataset_final <- to.factors(df = novo_datatset, variables = new.categorical.vars)
str(novo_dataset_final)
novo_dataset_final <- scale.features(novo_dataset_final, new.numeric.vars)
str(novo_dataset_final)
View(novo_dataset_final)
# PREVISÕES
previsoes_novo_cliente <- predict(modelo_final, newdata = novo_dataset_final, type = "response")
round(previsoes_novo_cliente)
round(previsoes_novo_cliente)
# PREVISÕES
previsoes_novo_cliente <- predict(modelo_final, newdata = novo_dataset_final, type = "response")
round(previsoes_novo_cliente)
